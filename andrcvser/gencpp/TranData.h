/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TranData_H
#define TranData_H

#include <thrift/TDispatchProcessor.h>
#include "cvrpc_types.h"

namespace cvrpc {

class TranDataIf {
 public:
  virtual ~TranDataIf() {}
  virtual void hello_string(std::string& _return, const std::string& para) = 0;
  virtual void read_data(std::string& _return, const std::string& name, const int32_t length) = 0;
  virtual void opencv_rpc(std::string& _return, const std::string& fun_name, const std::vector<std::string> & pa, const std::string& in_data) = 0;
  virtual void read_image(std::string& _return, const std::string& file_name, const std::map<std::string, std::string> & pa) = 0;
  virtual void image_match(std::vector<std::string> & _return, const std::string& fun_name, const std::string& img_data, const std::vector<std::string> & pa) = 0;
};

class TranDataIfFactory {
 public:
  typedef TranDataIf Handler;

  virtual ~TranDataIfFactory() {}

  virtual TranDataIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TranDataIf* /* handler */) = 0;
};

class TranDataIfSingletonFactory : virtual public TranDataIfFactory {
 public:
  TranDataIfSingletonFactory(const boost::shared_ptr<TranDataIf>& iface) : iface_(iface) {}
  virtual ~TranDataIfSingletonFactory() {}

  virtual TranDataIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TranDataIf* /* handler */) {}

 protected:
  boost::shared_ptr<TranDataIf> iface_;
};

class TranDataNull : virtual public TranDataIf {
 public:
  virtual ~TranDataNull() {}
  void hello_string(std::string& /* _return */, const std::string& /* para */) {
    return;
  }
  void read_data(std::string& /* _return */, const std::string& /* name */, const int32_t /* length */) {
    return;
  }
  void opencv_rpc(std::string& /* _return */, const std::string& /* fun_name */, const std::vector<std::string> & /* pa */, const std::string& /* in_data */) {
    return;
  }
  void read_image(std::string& /* _return */, const std::string& /* file_name */, const std::map<std::string, std::string> & /* pa */) {
    return;
  }
  void image_match(std::vector<std::string> & /* _return */, const std::string& /* fun_name */, const std::string& /* img_data */, const std::vector<std::string> & /* pa */) {
    return;
  }
};

typedef struct _TranData_hello_string_args__isset {
  _TranData_hello_string_args__isset() : para(false) {}
  bool para;
} _TranData_hello_string_args__isset;

class TranData_hello_string_args {
 public:

  TranData_hello_string_args() : para() {
  }

  virtual ~TranData_hello_string_args() throw() {}

  std::string para;

  _TranData_hello_string_args__isset __isset;

  void __set_para(const std::string& val) {
    para = val;
  }

  bool operator == (const TranData_hello_string_args & rhs) const
  {
    if (!(para == rhs.para))
      return false;
    return true;
  }
  bool operator != (const TranData_hello_string_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_hello_string_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TranData_hello_string_pargs {
 public:


  virtual ~TranData_hello_string_pargs() throw() {}

  const std::string* para;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_hello_string_result__isset {
  _TranData_hello_string_result__isset() : success(false) {}
  bool success;
} _TranData_hello_string_result__isset;

class TranData_hello_string_result {
 public:

  TranData_hello_string_result() : success() {
  }

  virtual ~TranData_hello_string_result() throw() {}

  std::string success;

  _TranData_hello_string_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TranData_hello_string_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_hello_string_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_hello_string_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_hello_string_presult__isset {
  _TranData_hello_string_presult__isset() : success(false) {}
  bool success;
} _TranData_hello_string_presult__isset;

class TranData_hello_string_presult {
 public:


  virtual ~TranData_hello_string_presult() throw() {}

  std::string* success;

  _TranData_hello_string_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TranData_read_data_args__isset {
  _TranData_read_data_args__isset() : name(false), length(false) {}
  bool name;
  bool length;
} _TranData_read_data_args__isset;

class TranData_read_data_args {
 public:

  TranData_read_data_args() : name(), length(0) {
  }

  virtual ~TranData_read_data_args() throw() {}

  std::string name;
  int32_t length;

  _TranData_read_data_args__isset __isset;

  void __set_name(const std::string& val) {
    name = val;
  }

  void __set_length(const int32_t val) {
    length = val;
  }

  bool operator == (const TranData_read_data_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const TranData_read_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_read_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TranData_read_data_pargs {
 public:


  virtual ~TranData_read_data_pargs() throw() {}

  const std::string* name;
  const int32_t* length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_read_data_result__isset {
  _TranData_read_data_result__isset() : success(false) {}
  bool success;
} _TranData_read_data_result__isset;

class TranData_read_data_result {
 public:

  TranData_read_data_result() : success() {
  }

  virtual ~TranData_read_data_result() throw() {}

  std::string success;

  _TranData_read_data_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TranData_read_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_read_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_read_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_read_data_presult__isset {
  _TranData_read_data_presult__isset() : success(false) {}
  bool success;
} _TranData_read_data_presult__isset;

class TranData_read_data_presult {
 public:


  virtual ~TranData_read_data_presult() throw() {}

  std::string* success;

  _TranData_read_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TranData_opencv_rpc_args__isset {
  _TranData_opencv_rpc_args__isset() : fun_name(false), pa(false), in_data(false) {}
  bool fun_name;
  bool pa;
  bool in_data;
} _TranData_opencv_rpc_args__isset;

class TranData_opencv_rpc_args {
 public:

  TranData_opencv_rpc_args() : fun_name(), in_data() {
  }

  virtual ~TranData_opencv_rpc_args() throw() {}

  std::string fun_name;
  std::vector<std::string>  pa;
  std::string in_data;

  _TranData_opencv_rpc_args__isset __isset;

  void __set_fun_name(const std::string& val) {
    fun_name = val;
  }

  void __set_pa(const std::vector<std::string> & val) {
    pa = val;
  }

  void __set_in_data(const std::string& val) {
    in_data = val;
  }

  bool operator == (const TranData_opencv_rpc_args & rhs) const
  {
    if (!(fun_name == rhs.fun_name))
      return false;
    if (!(pa == rhs.pa))
      return false;
    if (!(in_data == rhs.in_data))
      return false;
    return true;
  }
  bool operator != (const TranData_opencv_rpc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_opencv_rpc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TranData_opencv_rpc_pargs {
 public:


  virtual ~TranData_opencv_rpc_pargs() throw() {}

  const std::string* fun_name;
  const std::vector<std::string> * pa;
  const std::string* in_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_opencv_rpc_result__isset {
  _TranData_opencv_rpc_result__isset() : success(false) {}
  bool success;
} _TranData_opencv_rpc_result__isset;

class TranData_opencv_rpc_result {
 public:

  TranData_opencv_rpc_result() : success() {
  }

  virtual ~TranData_opencv_rpc_result() throw() {}

  std::string success;

  _TranData_opencv_rpc_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TranData_opencv_rpc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_opencv_rpc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_opencv_rpc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_opencv_rpc_presult__isset {
  _TranData_opencv_rpc_presult__isset() : success(false) {}
  bool success;
} _TranData_opencv_rpc_presult__isset;

class TranData_opencv_rpc_presult {
 public:


  virtual ~TranData_opencv_rpc_presult() throw() {}

  std::string* success;

  _TranData_opencv_rpc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TranData_read_image_args__isset {
  _TranData_read_image_args__isset() : file_name(false), pa(false) {}
  bool file_name;
  bool pa;
} _TranData_read_image_args__isset;

class TranData_read_image_args {
 public:

  TranData_read_image_args() : file_name() {
  }

  virtual ~TranData_read_image_args() throw() {}

  std::string file_name;
  std::map<std::string, std::string>  pa;

  _TranData_read_image_args__isset __isset;

  void __set_file_name(const std::string& val) {
    file_name = val;
  }

  void __set_pa(const std::map<std::string, std::string> & val) {
    pa = val;
  }

  bool operator == (const TranData_read_image_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    if (!(pa == rhs.pa))
      return false;
    return true;
  }
  bool operator != (const TranData_read_image_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_read_image_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TranData_read_image_pargs {
 public:


  virtual ~TranData_read_image_pargs() throw() {}

  const std::string* file_name;
  const std::map<std::string, std::string> * pa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_read_image_result__isset {
  _TranData_read_image_result__isset() : success(false) {}
  bool success;
} _TranData_read_image_result__isset;

class TranData_read_image_result {
 public:

  TranData_read_image_result() : success() {
  }

  virtual ~TranData_read_image_result() throw() {}

  std::string success;

  _TranData_read_image_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const TranData_read_image_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_read_image_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_read_image_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_read_image_presult__isset {
  _TranData_read_image_presult__isset() : success(false) {}
  bool success;
} _TranData_read_image_presult__isset;

class TranData_read_image_presult {
 public:


  virtual ~TranData_read_image_presult() throw() {}

  std::string* success;

  _TranData_read_image_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TranData_image_match_args__isset {
  _TranData_image_match_args__isset() : fun_name(false), img_data(false), pa(false) {}
  bool fun_name;
  bool img_data;
  bool pa;
} _TranData_image_match_args__isset;

class TranData_image_match_args {
 public:

  TranData_image_match_args() : fun_name(), img_data() {
  }

  virtual ~TranData_image_match_args() throw() {}

  std::string fun_name;
  std::string img_data;
  std::vector<std::string>  pa;

  _TranData_image_match_args__isset __isset;

  void __set_fun_name(const std::string& val) {
    fun_name = val;
  }

  void __set_img_data(const std::string& val) {
    img_data = val;
  }

  void __set_pa(const std::vector<std::string> & val) {
    pa = val;
  }

  bool operator == (const TranData_image_match_args & rhs) const
  {
    if (!(fun_name == rhs.fun_name))
      return false;
    if (!(img_data == rhs.img_data))
      return false;
    if (!(pa == rhs.pa))
      return false;
    return true;
  }
  bool operator != (const TranData_image_match_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_image_match_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TranData_image_match_pargs {
 public:


  virtual ~TranData_image_match_pargs() throw() {}

  const std::string* fun_name;
  const std::string* img_data;
  const std::vector<std::string> * pa;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_image_match_result__isset {
  _TranData_image_match_result__isset() : success(false) {}
  bool success;
} _TranData_image_match_result__isset;

class TranData_image_match_result {
 public:

  TranData_image_match_result() {
  }

  virtual ~TranData_image_match_result() throw() {}

  std::vector<std::string>  success;

  _TranData_image_match_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const TranData_image_match_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TranData_image_match_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TranData_image_match_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TranData_image_match_presult__isset {
  _TranData_image_match_presult__isset() : success(false) {}
  bool success;
} _TranData_image_match_presult__isset;

class TranData_image_match_presult {
 public:


  virtual ~TranData_image_match_presult() throw() {}

  std::vector<std::string> * success;

  _TranData_image_match_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TranDataClient : virtual public TranDataIf {
 public:
  TranDataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TranDataClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void hello_string(std::string& _return, const std::string& para);
  void send_hello_string(const std::string& para);
  void recv_hello_string(std::string& _return);
  void read_data(std::string& _return, const std::string& name, const int32_t length);
  void send_read_data(const std::string& name, const int32_t length);
  void recv_read_data(std::string& _return);
  void opencv_rpc(std::string& _return, const std::string& fun_name, const std::vector<std::string> & pa, const std::string& in_data);
  void send_opencv_rpc(const std::string& fun_name, const std::vector<std::string> & pa, const std::string& in_data);
  void recv_opencv_rpc(std::string& _return);
  void read_image(std::string& _return, const std::string& file_name, const std::map<std::string, std::string> & pa);
  void send_read_image(const std::string& file_name, const std::map<std::string, std::string> & pa);
  void recv_read_image(std::string& _return);
  void image_match(std::vector<std::string> & _return, const std::string& fun_name, const std::string& img_data, const std::vector<std::string> & pa);
  void send_image_match(const std::string& fun_name, const std::string& img_data, const std::vector<std::string> & pa);
  void recv_image_match(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TranDataProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TranDataIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TranDataProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_hello_string(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_opencv_rpc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_image(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_image_match(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TranDataProcessor(boost::shared_ptr<TranDataIf> iface) :
    iface_(iface) {
    processMap_["hello_string"] = &TranDataProcessor::process_hello_string;
    processMap_["read_data"] = &TranDataProcessor::process_read_data;
    processMap_["opencv_rpc"] = &TranDataProcessor::process_opencv_rpc;
    processMap_["read_image"] = &TranDataProcessor::process_read_image;
    processMap_["image_match"] = &TranDataProcessor::process_image_match;
  }

  virtual ~TranDataProcessor() {}
};

class TranDataProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TranDataProcessorFactory(const ::boost::shared_ptr< TranDataIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TranDataIfFactory > handlerFactory_;
};

class TranDataMultiface : virtual public TranDataIf {
 public:
  TranDataMultiface(std::vector<boost::shared_ptr<TranDataIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TranDataMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TranDataIf> > ifaces_;
  TranDataMultiface() {}
  void add(boost::shared_ptr<TranDataIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void hello_string(std::string& _return, const std::string& para) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hello_string(_return, para);
    }
    ifaces_[i]->hello_string(_return, para);
    return;
  }

  void read_data(std::string& _return, const std::string& name, const int32_t length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_data(_return, name, length);
    }
    ifaces_[i]->read_data(_return, name, length);
    return;
  }

  void opencv_rpc(std::string& _return, const std::string& fun_name, const std::vector<std::string> & pa, const std::string& in_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->opencv_rpc(_return, fun_name, pa, in_data);
    }
    ifaces_[i]->opencv_rpc(_return, fun_name, pa, in_data);
    return;
  }

  void read_image(std::string& _return, const std::string& file_name, const std::map<std::string, std::string> & pa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_image(_return, file_name, pa);
    }
    ifaces_[i]->read_image(_return, file_name, pa);
    return;
  }

  void image_match(std::vector<std::string> & _return, const std::string& fun_name, const std::string& img_data, const std::vector<std::string> & pa) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->image_match(_return, fun_name, img_data, pa);
    }
    ifaces_[i]->image_match(_return, fun_name, img_data, pa);
    return;
  }

};

} // namespace

#endif
